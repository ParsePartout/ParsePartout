<article>
	<preamble>Torres-moreno1998.pdf</preamble>
	<titre>LETTER</titre>
	<auteurs>
		<auteur>
			<name>Communicated by Scott Fahlman</name>
			<mail>7LOL@J*URZWK</mail>
            <affiliation>J.   de  sur la , CEA Grenoble, 38054  9, France</affiliation>
      </auteur>
		<auteur>
			<name>Efficient Adaptive Learning</name>
			<mail>FOXPSV@J*URZWK</mail>
            <affiliation>Neural Computation 10, 1007-1030 (1998) c 1998 Massachusetts Institute of Technology</affiliation>
      </auteur>
		<auteur>
			<name>Classification Tasks</name>
			<mail>PRUH@J*URZWK</mail>
            <affiliation>Neural Computation 10, 1007-1030 (1998) c 1998 Massachusetts Institute of Technology</affiliation>
      </auteur>
		<auteur>
			<name>Binary Units</name>
			<mail>RU@J*URZWK</mail>
            <affiliation>Neural Computation 10, 1007-1030 (1998) c 1998 Massachusetts Institute of Technology</affiliation>
      </auteur>
		<auteur>
			<name>Manuel Torres Moreno</name>
			<mail>@J*URZWK</mail>
            <affiliation>Neural Computation 10, 1007-1030 (1998) c 1998 Massachusetts Institute of Technology</affiliation>
      </auteur>
		<auteur>
			<name>Mirta B. Gordon Departement</name>
            <affiliation>Neural Computation 10, 1007-1030 (1998) c 1998 Massachusetts Institute of Technology</affiliation>
      </auteur>
		<auteur>
			<name>Recherche Fondamentale</name>
            <affiliation>Neural Computation 10, 1007-1030 (1998) c 1998 Massachusetts Institute of Technology</affiliation>
      </auteur>
		<auteur>
			<name>Matiere Condensee</name>
            <affiliation>Neural Computation 10, 1007-1030 (1998) c 1998 Massachusetts Institute of Technology</affiliation>
      </auteur>
		<auteur>
			<name>Grenoble Cedex</name>
            <affiliation>Neural Computation 10, 1007-1030 (1998) c 1998 Massachusetts Institute of Technology</affiliation>
      </auteur>
	</auteurs>
	<abstract>This article presents a new incremental learning algorithm for classification tasks, called NetLines, which is well adapted for both binary and real-valued input patterns. It generates small, compact feedforward neural networks with one hidden layer of binary units and binary output units. A convergence theorem ensures that solutions with a finite number of hidden units exist for both binary and real-valued input patterns. An implementation for problems with more than two classes, valid for any binary classifier, is proposed. The generalization error and the size of the resulting networks are compared to the best published results on well-known classification benchmarks. Early stopping is shown to decrease overfitting, without improving the generalization performance.</abstract>
	<introduction>Feedforward neural networks have been successfully applied to the prob-lem of learning pattern classification from examples. The relationship of thenumber of weights to the learning capacity and the network's generalizationability is well understood only for the simple perceptron, a single binaryunit whose output is a sigmoidal function of the weighted sum of its inputs.In this case, efficient learning algorithms based on theoretical results allowthe determination of the optimal weights. However, simple perceptrons cangeneralize only those (very few) problems in which the input patterns arelinearly separable (LS). In many actual classification tasks, multilayered per-ceptrons with hidden units are needed. However, neither the architecture(number of units, number of layers) nor the functions that hidden unitshave to learn are known a priori, and the theoretical understanding of thesenetworks is not enough to provide useful hints.Although pattern classification is an intrinsically discrete task, it may becast as a problem of function approximation or regression by assigning realvalues to the targets. This is the approach used by backpropagation andNeural Computation 10, 1007-1030 (1998) c 1998 Massachusetts Institute of Technology1008 J. Manuel Torres Moreno and Mirta B. Gordonrelated algorithms, which minimize the squared training error of the out-put units. The approximating function must be highly nonlinear because ithas to fit a constant value inside the domains of each class and present alarge variation at the boundaries between classes. For example, in a binaryclassification task in which the two classes are coded as +1 and -1, theapproximating function must be constant and positive in the input spaceregions or domains corresponding to class 1 and constant and negativefor those of class -1. The network's weights are trained to fit this functioneverywhere--in particular, inside the class domains--instead of concentrat-ing on the relevant problem of the determination of the frontiers betweenclasses. Because the number of parameters needed for the fit is not knowna priori, it is tempting to train a large number of weights that can span, atleast in principle, a large set of functions expected to contain the "true" one.This introduces a small bias (Geman, Bienenstock, &amp; Doursat, 1992), butleaves us with the difficult problem of minimizing a cost function in a high-dimensional space, with the risk that the algorithm gets stuck in spuriouslocal minima, whose number grows with the number of weights. In prac-tice, the best generalizer is determined through a trial-and-error process inwhich both the numbers of neurons and weights are varied.An alternative approach is provided by incremental, adaptive, or growthalgorithms,inwhichthehiddenunitsaresuccessivelyaddedtothenetwork.One advantage is fast learning, not only because the problem is reduced totraining simple perceptrons but also because adaptive procedures do notneed the trial-and-error search for the most convenient architecture. Growthalgorithms allow the use of binary hidden neurons, well suited for buildinghardware-dedicated devices. Each binary unit determines a domain bound-ary in input space. Patterns lying on either side of the boundary are givendifferent hidden states. Thus, all the patterns inside a domain in input spaceare mapped to the same internal representation (IR). This binary encoding isdifferent for each domain. The output unit performs a logic (binary) functionof these IRs, a feature that may be useful for rule extraction. Because thereis not a unique way of associating IRs to the input patterns, different incre-mental learning algorithms propose different targets to be learned by theappended hidden neurons. This is not the only difference. Several heuristicsexist that generate fully connected feedforward networks with one or morelayers, and treelike architectures with different types of neurons (linear, ra-dial basis functions). Most of these algorithms are not optimal with respectto the number of weights or hidden units. Indeed, growth algorithms haveoften been criticized because they may generate networks that are too large,generally believed to be poor generalizers because of overfitting.This article presents a new incremental learning algorithm for binaryclassification tasks that generates small feedforward networks. These net-works have a single hidden layer of binary neurons fully connected to theinputs and a single output neuron connected to the hidden units. We callit NetLines, for Neural Encoder Through Linear Separations. During theClassification Tasks with Binary Units 1009learning process, the targets that each appended hidden unit has to learnhelp to decrease the number of classification errors of the output neuron.The crucial test for any learning algorithm is the generalization ability ofthe resulting network. It turns out that the networks built with NetLines aregenerally smaller and generalize better than the best networks found so faron well-known benchmarks. Thus, large networks do not necessarily fol-low from growth heuristics. On the other hand, although smaller networksmay be generated with NetLines through early stopping, we found thatthey do not generalize better than the networks that were trained until thenumber of training errors vanished. Thus, overfitting does not necessarilyspoil the network's performance. This surprising result is in good agreementwith recent work on the bias-variance dilemma (Friedman, 1996) showingthat, unlike in regression problems where bias and variance compete in thedetermination of the optimal generalizer, in the case of classification theycombine in a highly nonlinear way.Although NetLines creates networks for two-class problems, multiclassproblems may be solved using any strategy that combines binary classifiers,like winner-takes-all. We propose a more involved approach, through theconstruction of a tree of networks, that may be coupled with any binaryclassifier.NetLines is an efficient approach for creating small, compact classifiersfor problems with binary or continuous inputs. It is best suited for problemsrequiring a discrete classification decision. Although it may estimate poste-rior probabilities, as discussed in section 2.6, this requires more informationthan the bare network's output. Another weakness of NetLines is that it isnot simple to retrain the network when new patterns are available or classpriors change over time.In section 2, we give the basic definitions and present a simple exampleof our strategy, followed by the formal presentation of the growth heuristicsand the perceptron learning algorithm used to train the individual units.In section 3 we compare NetLines to other growth strategies. The construc-tion of trees of networks for multiclass problems is presented in section 4.A comparison of the generalization error and the network's size, with re-sults obtained with other learning procedures, is presented in section 5. Theconclusions are set out in section 6.</introduction>
	<body>2 The Incremental Learning Strategy2.1 Definitions. We are given a training set of P input-output examples{, }, where  = 1, 2, . . . , P. The inputs  = (1, 1, 2, . . . , N) may bebinary or real valued N+1 dimensional vectors. The first component 0 1,the same for all the patterns, allows us to treat the bias as a supplementaryweight. The outputs are binary,  = 1. These patterns are used to learnthe classification task with the growth algorithm. Assume that, at a givenstage of the learning process, the network already has h binary neurons1010 J. Manuel Torres Moreno and Mirta B. Gordonin the hidden layer. These neurons are connected to the N + 1 input unitsthrough synaptic weights wk= (wk0, wk1* * * wkN), 1  k  h, wk0 being thebias.Then, given an input pattern , the states k of the hidden neurons (1 k  h) given byk= signNi=0wkii sign(wk* ) (2.1)define the pattern's h-dimensional IR, (h) = (1, 1, . . . , h). The network'soutput (h) is:(h) = signhk=0Wkk sign W(h) * (h) (2.2)where W(h) = (W0, W1, . . . , Wh are the output unit weights. Hereafter,(h) = (1, 1, . . . , h) is the h-dimensional IR associated by the networkof h hidden units to pattern . During the training process, h increasesthrough the addition of hidden neurons, and we denote the final numberof hidden units as H.2.2 Example. We first describe the general strategy on a schematic ex-ample (see Figure 1). Patterns in the gray region belong to class  = +1, theothers to  = -1. The algorithm proceeds as follows. A first hidden unitis trained to separate the input patterns at best and finds one solution, sayw1, represented on Figure 1 by the line labeled 1, with the arrow pointinginto the positive half-space. Because training errors remain, a second hid-den neuron is introduced. It is trained to learn targets 2= +1 for patternswell classified by the first neuron and 2= -1 for the others (the oppositeconvention could be adopted, both being strictly equivalent), and supposethat solution w2 is found. Then an output unit is connected to the two hid-den neurons and is trained with the original targets. Clearly it will fail toseparate all the patterns correctly because the IR (-1, 1) and (+-) are notfaithful, as patterns of both classes are mapped onto them. The output neu-ron is dropped, and a third hidden unit is appended and trained with targets3= +1 for patterns that were correctly classified by the output neuron and3= -1 for the others. Solution w3 is found, and it is easy to see that nowthe IRs are faithful, that is, patterns belonging to different classes are givendifferent IRs. The algorithm converged with three hidden units that definethree domain boundaries determining six regions or domains in the inputspace. It is straightforward to verify that the IRs corresponding to each do-main on Figure 1 are linearly separable. Thus, the output unit will find thecorrect solution to the training problem. If the faithful IRs were not linearlyseparable, the output unit would not find a solution without training errors,and the algorithm would go on appending hidden units that should learnClassification Tasks with Binary Units 1011312- + -+ - -- + ++ + ++ - ++ + -Figure 1: Patterns inside the gray region belong to one class, those in the whiteregiontotheother.Thelines(labeled1,2,and3)representthehyperplanesfoundwith the NetLines strategy. The arrows point into the correspondent positivehalf-spaces. The IRs of each domain are indicated (the first component, 0= 1,is omitted for clarity).targets  = 1 for well-learned patterns, and  = -1 for the others. A proofthat a solution to this strategy with a finite number of hidden units exists isleft to the appendix.2.3 The Algorithm NetLines. Like most other adaptive learning algo-rithms, NetLines combines a growth heuristics with a particular learningalgorithm for training the individual units, which are simple perceptrons.In this section, we present the growth heuristics first, followed by the de-scription of Minimerror, our perceptron learning algorithm.We first introduce the following useful remark: if a neuron has to learn atarget , and the learned state turns out to be , then the product  = 1 ifthe target has been correctly learned, and  = -1 otherwise.Given a maximal accepted number of hidden units, Hmax, and a maximalnumber of tolerated training errors, Emax, the Netlines algorithm may besummarized as follows:Algorithm.* Initializeh = 0;set the targets h+1=  for  = 1, . . . , P;1012 J. Manuel Torres Moreno and Mirta B. Gordon* Repeat1. /* train the hidden units */h = h + 1; /* connect hidden unit h to the inputs */learn the training set {, h},  = 1, . . . , P;after learning, h= sign(wh* ),  = 1, . . . , P;if h = 1 /* for the first hidden neuron */if 1= 1 then stop. /* the training set is LS */;else set h+1= h for  = 1, . . . , P; go to 1;end if2. /* learn the mapping between the IRs and the outputs */connect the output neuron to the h trained hidden units;learn the training set {(h), };  = 1, . . . , P;after learning, (h) = sign W(h) *  ,  = 1, . . . , P;set h+1=  for  = 1, . . . , P;count the number of training errors e = (1 - h+1)/2;* Until (h = Hmax or e  Emax);The generated network has H = h hidden units. In the appendix we presenta solution to the learning strategy with a bounded number of hidden units.In practice, the algorithm ends up with much smaller networks than thisupper bound, as will be shown in section 5.2.4 The Perceptron Learning Algorithm. The final number of hiddenneurons, which are simple perceptrons, depends on the performance of thelearning algorithm used to train them. The best solution should minimizethe number of errors. If the training set is LS, it should endow the units withthe lowest generalization error. Our incremental algorithm uses Minimerror(Gordon &amp; Berchier, 1993) to train the hidden and output units. Minimer-ror is based on the minimization of a cost function E that depends on theperceptron weights w through the stabilities of the training patterns. If theinput vector is  and  the corresponding target, then the stability   ofpattern  is a continuous and derivable function of the weights, given by:  = w * w, (2.3)where w =w * w. The stability is independent of the norm of the weightsw . It measures the distance of the pattern to the separating hyperplane,which is normal to w; it is positive if the pattern is well classified, negativeClassification Tasks with Binary Units 1013otherwise. The cost function E is:E =12P=11 - tanh 2T. (2.4)The contribution to E of patterns with large negative stabilities is 1, thatis, they are counted as errors, whereas the contribution of patterns withlarge, positive stabilities is vanishingly small. Patterns at both sides of thehyperplane within a window of width  4T contribute to the cost functioneven if they have positive stability.The properties of the global minimum of equation 2.4 have been studiedtheoretically with methods of statistical mechanics (Gordon &amp; Grempel,1995). It was shown that in the limit T  0, the minimum of E correspondsto the weights that minimize the number of training errors. If the trainingset is LS, these weights are not unique (Gyorgyi &amp; Tishby, 1990). In that case,there is an optimal learning temperature such that the weights minimizingE at that temperature endow the perceptron with a generalization errornumerically indistinguishable from the optimal (Bayesian) value.The algorithm Minimerror (Gordon &amp; Berchier, 1993; Raffin &amp; Gordon,1995) implements a minimization of E restricted to a subspace of normalizedweights, through a gradient descent combined with a slow decrease of thetemperature T, which is equivalent to a deterministic annealing. It has beenshown that the convergence is faster if patterns with negative stabilities areconsidered at a temperature T- larger than those with positive stabilities,T+, with a constant ratio  = T-/T+. The weights and the temperatures areiteratively updated through:w(t) =/ 0cosh2( /2T-)+/ &amp;gt;0cosh2( /2T+)(2.5)T-1+(t + 1) = T-1+(t) + T-1; T- = T+; (2.6)w(t + 1) = N + 1w(t) + w(t)w(t) + w(t). (2.7)Notice from equation 2.5 that only the incorrectly learned patterns at dis-tances shorter than  2T- from the hyperplane, and those correctly learnedlying closer than  2T+, contribute effectively to learning. The contribu-tion of patterns outside this region is vanishingly small. By decreasing thetemperature, the algorithm selects to learn patterns increasingly localizedin the neighborhood of the hyperplane, allowing for a highly precise de-termination of the parameters defining the hyperplane, which are the neu-ron's weights. Normalization 2.7 restricts the search to the subspace withw =N + 1.The only adjustable parameters of the algorithm are the temperature ratio = T-/T+, the learning rate , and the annealing rate T-1. In principle,1014 J. Manuel Torres Moreno and Mirta B. Gordonthey should be adapted to each specific problem. However, as a result ofour normalizing the weights toN + 1 and to data standardization (see thenext section), all the problems are brought to the same scale, simplifying thechoice of the parameters.2.5 Data Standardization. Instead of determining the best parametersfor each new problem, we standardize the input patterns of the training setthrough a linear transformation, applied to each component:i=i- ii; 1  i  N. (2.8)The mean i and the variance 2i, defined as usual,i=1PP=1i (2.9)i2 =1PP=1(i- i)2 =1PP=1(i)2 - ( i)2, (2.10)need only a single pass of the P training patterns to be determined. Afterlearning, the inverse transformation is applied to the weights,w0= N + 1w0-Ni=1wii/ iw0- Nj=1wjj/ j2+ Nj=1(wj/ j)2(2.11)wi= N + 1wi/ iw0- Nj=1wjj/ j2+ Nj=1(wj/ j)2, (2.12)so that the normalization (see equation 2.8) is completely transparent to theuser: with the transformed weights (see equations 2.11 and 2.12), the neuralclassifier is applied to the data in the original user's units, which do notneed to be renormalized.As a consequence of the weights scaling (see equation 2.7) and the in-puts standardization (see equation 2.8), all the problems are automaticallyrescaled. This allows us to use always the same values of Minimerror's pa-rameters: the standard values = 0.02, T-1 = 10-3, and  = 6. They wereused throughout this article, the reported results being highly insensitive toslight variations of them. However, in some extremely difficult cases, likelearning the parity in dimensions N &amp;gt; 10 and finding the separation of thesonar signals (see section 5), larger values of  were needed.Classification Tasks with Binary Units 10152.6 Interpretation. Ithasbeenshown(Gordon,Peretto,&amp;Berchier,1993)that the contribution of each pattern to the cost function of Minimerror,[1 - tanh( /2T)]/2, may be interpreted as the probability of misclassifica-tion at the temperature T at which the minimum of the cost function hasbeen determined. By analogy, the neuron's prediction on a new input  maybe given a confidence measure by replacing the (unknown) pattern stabil-ity by its absolute value  = w *  / w , which is its distance to thehyperplane. This interpretation of the sigmoidal function tanh(  /2T) asthe confidence on the neuron's output is similar to the one proposed earlier(Goodman, Smyth, Higgins, &amp; Miller, 1992) within an approach based oninformation theory.The generalization of these ideas to multilayered networks is not straight-forward. An estimate of the confidence on the classification by the outputneuron should include the magnitude of the weighted sums of the hiddenneurons, as they measure the distances of the input pattern to the domainboundaries. However, short distances to the separating hyperplanes are notalways correlated to low confidence on the network's output. For an exam-ple, we refer again to Figure 1. Consider a pattern lying close to hyperplane1. A small, weighted sum on neuron 1 may cast doubt on the classificationif the pattern's IR is (- + +) but not if it is (- + -), because a change of thesign of the weighted sum in the latter case will map the pattern to the IR(+ + -) which, being another IR of the same class, will be given the sameoutput by the network. It is worth noting that the same difficulty is met bythe interpretation of the outputs of multilayered perceptrons, trained withbackpropagation, as posterior probabilities. We do not explore this problemany further because it is beyond the scope of this article.3 Comparison with Other StrategiesThere are few learning algorithms for neural networks composed of binaryunits. To our knowledge, all of them are incremental. In this section, wegive a short overview of some of them, in order to put forward the maindifferences with NetLines. We discuss the growth heuristics and then theindividual unit training algorithms.The Tiling algorithm (Mezard &amp; Nadal, 1989) introduces hidden layers,one after the other. The first neuron of each layer is trained to learn an IR thathelps to decrease the number of training errors; supplementary hidden unitsare then appended to the layer until the IRs of all the patterns in the train-ing set are faithful. This procedure may generate very large networks. TheUpstart algorithm (Frean, 1990) introduces successive couples of daughterhidden units between the input layer and the previously included hiddenunits, which become their parents. The daughters are trained to correctthe parents' classification errors, one daughter for each class. The obtainednetwork has a treelike architecture. There are two different algorithms im-plementing the Tilinglike Learning in the Parity Machine (Biehl &amp; Opper,1016 J. Manuel Torres Moreno and Mirta B. Gordon1991), Offset (Martinez &amp; Esteve, 1992), and MonoPlane (Torres Moreno &amp;Gordon, 1995). In both, each appended unit is trained to correct the errorsof the previously included unit in the same hidden layer, a procedure thathas been shown to generate a parity machine: the class of the input patternsis the parity of the learned IRs. Unlike Offset, which implements the paritythrough a second hidden layer that needs to be pruned, MonoPlane goeson adding hidden units (if necessary) in the same hidden layer until thenumber of training errors at the output vanishes. Convergence proofs forbinary input patterns have been produced for all these algorithms. In thecase of real-valued input patterns, a solution to the parity machine with abounded number of hidden units also exists (Gordon, 1996).The rationale behind the construction of the parity machine is that itis not worth training the output unit before all the training errors of thehidden units have been corrected. However, Marchand, Golea, and Rujan(1990) pointed out that it is not necessary to correct all the errors of thesuccessively trained hidden units. It is sufficient that the IRs be faithful andLS. If the output unit is trained immediately after each appended hiddenunit, the network may discover that the IRs are already faithful and stopadding units. This may be seen in Figure 1. None of the parity machineimplementations would find the solution represented on the figure, becauseeach of the three perceptrons systematically unlearns part of the patternslearned by the preceding one.To our knowledge, Sequential Learning (Marchand et al., 1990) is theonly incremental learning algorithm that might find a solution equivalent(although not the same) to the one of Figure 1. In this algorithm, the firstunit is trained to separate the training set keeping one "pure" half-space--containing patterns of only one class. Wrongly classified patterns, if any,must all lie in the other half-space. Each appended neuron is trained toseparate wrongly classified patterns with this constraint of always keepingone pure, error-free half-space. Thus, neurons must be appended in a preciseorder, making the algorithm difficult to implement in practice. For example,Sequential Learning applied to the problem of Figure 1 needs to impose thatthe first unit finds the weights w3, the only solution satisfying the purityrestriction.Other proposed incremental learning algorithms strive to solve the prob-lem with different architectures, and/or with real valued units. For example,in the algorithm Cascade Correlation (Fahlman &amp; Lebiere, 1990), each ap-pended unit is selected among a pool of several real-valued neurons, trainedto learn the correlation between the targets and the training errors. The unitis then connected to the input units and to all the other hidden neuronsalready included in the network.Another approach to learning classification tasks is through the construc-tion of decision trees (Breiman, Friedman, Olshen, &amp; Stone, 1984), which hi-erarchically partition the input space through successive dichotomies. Theneural networks implementations generate treelike architectures. Each neu-Classification Tasks with Binary Units 1017ron of the tree introduces a dichotomy of the input space, which is treatedseparately by the children nodes, which eventually produce new splits. Be-sides the weights, the resulting networks need to store the decision path.The proposed heuristics (Sirat &amp; Nadal, 1990; Farrell &amp; Mammone, 1994;Knerr, Personnaz, &amp; Dreyfus, 1990) differ in the algorithm used to train eachnode and/or in the stopping criterion. In particular, Neural-Trees (Sirat &amp;Nadal, 1990) may be regarded as a generalization of Classification and Re-gression Trees (CART) (Breiman et al., 1984) in which the hyperplanes arenot constrained to be perpendicular to the coordinate axis. The heuristics ofthe Modified Neural Tree Network (MNTN) (Farrell &amp; Mammone, 1994),similar to Neural-Trees, includes a criterion of early stopping based on aconfidence measure of the partition. As NetLines considers the whole inputspace to train each hidden unit, it generates domain boundaries that maygreatly differ from the splits produced by trees. We are not aware of anysystematic study or theoretical comparison of both approaches.Other algorithms, like Restricted Coulomb Energy (RCE) (Reilly, Cooper,&amp; Elbaum, 1982), Grow and Learn (GAL) (Alpaydin, 1990), Glocal (Depe-nau, 1995), and Growing Cells (Fritzke, 1994), propose to cover or mask theinput space with hyperspheres of adaptive size containing patterns of thesame class. These approaches generally end up with a very large number ofunits. Covering Regions by the LP Method (Mukhopadhyay, Roy, Kim, &amp;Govil, 1993) is a trial-and-error procedure devised to select the most efficientmasks among hyperplanes, hyperspheres, and hyperellipsoids. The mask'sparameters are determined through linear programming.Many incremental strategies use the Pocket algorithm (Gallant, 1986)to train the appended units. Its main drawback is that it has no naturalstopping condition, which is left to the user's patience. The proposed alter-native algorithms (Frean, 1992; Bottou &amp; Vapnik, 1992) are not guaranteedto find the best solution to the problem of learning. The algorithm used bythe MNTN (Farrell &amp; Mammone, 1994) and the ITRULE (Goodman et al.,1992) minimize cost functions similar to equation 2.4, but using differentmisclassification measures at the place of our stability (see equation 2.3).The essential difference with Minimerror is that none of these algorithms isable to control which patterns contribute to learning, as Minimerror doeswith the temperature.4 Generalization to Multiclass ProblemsThe usual way to cope with problems having more than two classes is togenerate as many networks as classes. Each network is trained to separatepatterns of one class from all the others, and a winner-takes-all (WTA) strat-egy based on the value of the output's weighted sum in equation 2.2 is usedto decide the class if more than one network recognizes the input pattern. Inour case, because we use normalized weights, the output's weighted sumis merely the distance of the IR to the separating hyperplane. All the pat-1018 J. Manuel Torres Moreno and Mirta B. Gordonterns mapped to the same IR are given the same output's weighted sum,independent of the relative position of the pattern in input space. A strongweighted sum on the output neuron is not inconsistent with small weightedsums on the hidden neurons. Therefore, a naive WTA decision may not givegood results, as shown in the example in section 5.3.1.We now describe an implementation for the multiclass problem that re-sults in a treelike architecture of networks. It is more involved than the naiveWTA and may be applied to any binary classifier. Suppose that we have aproblem with C classes. We must choose in which order the classes willbe learned, say (c1, c2, . . . , cC). This order constitutes a particular learningsequence. Given a particular learning sequence, a first network is trainedto separate class c1, which is given output target 1= +1, from the others(which are given targets 1= -1). The opposite convention is equivalentand could equally be used. After training, all the patterns of class c1 areeliminated from the training set, and we generate a second network trainedto separate patterns of class c2 from the remaining classes. The procedure,reiterated with training sets of decreasing size, generates C - 1 hierarchi-cally organized tree of networks (TON): the outputs are ordered sequences = (1, 2, . . . , C-1). The predicted class of a pattern is ci, where i is thefirst network in the sequence having an output +1 (i= +1 and j= -1 forj &amp;lt; i), the outputs of the networks with j &amp;gt; i being irrelevant.The performance of the TON may depend on the chosen learning se-quence. Therefore, it is convenient that an odd number of TONs, trainedwith different learning sequences, compete through a vote. We verified em-pirically, as is shown in section 5.3, that this vote improves the results ob-tained with each of the individual TONs participating in the vote. Noticethat our procedure is different from bagging (Breiman, 1994); all the net-works of the TON are trained with the same training set, without the needof any resampling procedure.5 ApplicationsAlthough convergence proofs of learning algorithms are satisfactory on the-oretical grounds, they are not a guarantee of good generalization. In fact,they demonstrate only that correct learning is possible; they do not addressthe problem of generalization. This last issue still remains quite empirical(Vapnik, 1992; Geman et al., 1992; Friedman, 1996), and the generalizationperformance of learning algorithms is usually tested on well-known bench-marks (Prechelt, 1994).We first tested the algorithm on learning the parity function of N bits for2  N  11. It is well known that the smallest network with the architectureconsidered here needs H = N hidden neurons. The optimal architecturewas found in all the cases. Although this is quite an unusual performance,the parity is not a representative problem: learning is exhaustive, and gen-eralization cannot be tested. Another test, the classification of sonar signalsClassification Tasks with Binary Units 1019(Gorman &amp; Sejnowski, 1988), revealed the quality of Minimerror, as it solvedthe problem without hidden units. In fact, we found that not only the train-ing set of this benchmark is linearly separable, a result already reported(Hoehfeld &amp; Fahlman, 1991; Roy, Kim, &amp; Mukhopadhyay, 1993), but thatthe complete database--the training and the test sets together--is also lin-early separable (Torres Moreno &amp; Gordon, 1998).Wenextpresentourresults,generalizationerror g andnumberofweights,on several benchmarks corresponding to different kinds of problems: binaryclassification of binary input patterns, binary classification of real-valuedinput patterns, and multiclass problems. These benchmarks were chosenbecause they have already served as a test for many other algorithms, pro-viding us with unbiased results for comparison. The generalization errorg of NetLines was estimated as usual, through the fraction of misclassifiedpatterns on a test set of data.The results are reported as a function of the training sets sizes P wheneverthese sizes are not specified by the benchmark. Besides the generalizationerror g, averaged over a (specified) number of classifiers trained with ran-domly selected training sets, we also present the number of weights of thecorresponding networks which is a measure of the classifier's complexity,as it corresponds to the number of its parameters.Training times are usually cited among the characteristics of the trainingalgorithms. Only the numbers of epochs used by backpropagation on twoof the studied benchmarks have been published; we restrict the comparisonto these cases. As NetLines updates only N weights per epoch, whereasbackpropagation updates all the network's weights, we compare the totalnumber of weights updates. They are of the same order of magnitude forboth algorithms. However, these comparisons should be taken with cau-tion. NetLines is a deterministic algorithm; it learns the architecture andthe weights through a single run, whereas with backpropagation severalarchitectures must be previously investigated, and this time is not includedin the training time.Thefollowingnotationisused:Disthetotalnumberofavailablepatterns,P the number of training patterns, and G the number of test patterns.5.1 Binary Inputs. The case of binary input patterns has the property,not shared by real-valued inputs, that every pattern may be separated fromthe others by a single hyperplane. This solution, usually called grandmother,needs as many hidden units as patterns in the training set. In fact, the conver-gence proofs for incremental algorithms in the case of binary input patternsare based on this property.5.1.1 Monk's Problem. This benchmark, thoroughly studied with manydifferent learning algorithms (Trhun et al., 1991), contains three distinctproblems. Each has an underlying logical proposition that depends on sixdiscrete variables, coded with N = 17 binary numbers. The total number of1020 J. Manuel Torres Moreno and Mirta B. Gordonpossible input patterns is D = 432, and the targets correspond to the truth ta-ble of the corresponding proposition. Both NetLines and MonoPlane foundthe underlying logical proposition of the first two problems; they general-ized correctly, giving g= 0. In fact, these are easy problems: all the neuralnetwork-based algorithms, and some nonneural learning algorithms werereported to generalize them correctly. In the third Monk's problem, 6 pat-terns among the P3= 122 examples are given wrong targets. The general-ization error is calculated over the complete set of D = 432 patterns, that is,including the training patterns, but in the test set all the patterns are giventhe correct targets. Thus, any training method that learns the training setcorrectly will make at least 1.4% of generalization errors. Four algorithmsspeciallyadaptedtonoisyproblemswerereportedtoreach g= 0.However,none of them generalizes correctly the two other (noiseless) Monk's prob-lems. Besides them, the best performance, g= 0.0277, which correspondsto 12 misclassified patterns, is reached only by neural networks methods:backpropagation, backpropagation with weight decay, cascade correlation,and NetLines. The number of hidden units generated with NetLines (58weights) is intermediate between backpropagation with weight decay (39)and cascade correlation (75) or backpropagation (77). MonoPlane reached aslightly worse performance ( g= 0.0416, or 18 misclassified patterns) withthe same number of weights as NetLines, showing that the parity machineencoding may not be optimal.5.1.2 Two or More Clumps. In this problem (Denker et al., 1987) the net-work has to discriminate if the number of clumps in a ring of N bits is strictlysmaller than 2 or not. One clump is a sequence of identical bits bounded bybits of the other kind. The patterns are generated through a Monte Carlomethod in which the mean number of clumps is controlled by a parameterk (Mezard &amp; Nadal, 1989). We generated training sets of P patterns withk = 3, corresponding to a mean number of clumps of  1.5, for rings ofN = 10 and N = 25 bits. The generalization error corresponding to sev-eral learning algorithms, estimated with independently generated testingsets of the same sizes as the training sets, G = P, are displayed in Figure 2as a function of P. Points with error bars correspond to averages over 25independent training sets. Points without error bars correspond to best re-sults. NetLines, MonoPlane, and Upstart for N = 25 have nearly the sameperformances when trained to reach error-free learning.We tested the effect of early stopping by imposing on NetLines a maximalnumber of two hidden units (H = 2). The residual training error t is plottedon Figure 2, as a function of P. Note that early stopping does not help to de-crease g. Overfitting, which arises when NetLines is applied until error-freetraining is reached, does not degrade the network's generalization perfor-mance. This behavior is very different from the one of networks trainedwith backpropagation. The latter reduces classification learning to a regres-sion problem, in which the generalization error can be decomposed in twoClassification Tasks with Binary Units 1021      1HW/LQHV 91HW/LQHV + 1HW/LQHV7LOLQJ*URZWK8SVWDUW! RU PRUH FOXPSV1      J! RU PRUH FOXPSV1 %DFNSURS6WHSZLVH0RQR3ODQH1HW/LQHVFigure 2: Two or more clumps for two ring sizes, N = 10 and N = 25. Gen-eralization error gversus size of the training set P, for different algorithms.N = 10: backpropagation (Solla, 1989), Stepwise (Knerr et al., 1990). N = 25:Tiling (Mezard &amp; Nadal, 1989), Upstart (Frean, 1990). Results with the GrowthAlgorithm (Nadal, 1989) are indistinguishable from those of Tiling at the scaleof the figure. Points without error bars correspond to best results. Results ofMonoPlane and NetLines are averages over 25 tests.competing terms: bias and variance. With backpropagation, early stoppinghelps to decrease overfitting because some hidden neurons do not reachlarge enough weights to work in the nonlinear part of the sigmoidal trans-fer functions. All the neurons working in the linear part may be replaced bya single linear unit. Thus, with early stopping, the network is equivalent toa smaller one with all the units working in the nonlinear regime. Our resultsare consistent with recent theories (Friedman, 1996) showing that, contraryto regression, the bias and variance components of the generalization errorin classification combine in a highly nonlinear way.The number of weights used by the different algorithms is plotted on alogarithmic scale as a function of P in Figure 3. It turns out that the strategyof NetLines is slightly better than that of MonoPlane with respect to bothgeneralization performance and network size.5.2 Real Valued Inputs. We tested NetLines on two problems that havereal valued inputs (we include graded-valued inputs here).5.2.1 Wisconsin Breast Cancer Database. The input patterns of this bench-mark (Wolberg &amp; Mangasarian, 1990) have N = 9 attributes characterizing1022 J. Manuel Torres Moreno and Mirta B. Gordon      1HW/LQHV8SVWDUW RU PRUH FOXPSV1 !     !1XPEHU RI ZHLJKWV RU PRUH FOXPSV1 %DFNSURSDJDWLRQ6WHSZLVH0RQR3ODQH1HW/LQHVFigure 3: Two or more clumps. Number of weights (logarithmic scale) versussize of the training set P, for N = 10 and N = 25. Results of MonoPlane andNetLines are averages over 25 tests. The references are the same as in Figure 2.samples of breast cytology, classified as benign or malignant. We excludedfrom the original database 16 patterns that have the attribute 6 ("bare nu-clei") missing. Among the remaining D = 683 patterns, the two classes areunevenly represented, 65.5% of the examples being benign. We studied thegeneralization performance of networks trained with sets of several sizes P.The P patterns for each learning test were selected at random. In Figure 4a,the generalization error at classifying the remaining G  D - P patterns isdisplayed as a function of the corresponding number of weights in a loga-rithmic scale. For comparison, we included in the same figure results of asingle perceptron trained with P = 75 patterns using Minimerror. The re-sults, averaged values over 50 independent tests for each P, show that bothNetLines and MonoPlane have lower g and fewer parameters than otheralgorithms on this benchmark.The total number of weights updates needed by NetLines, including theweights of the dropped output units, is 7 * 104; backpropagation needed 104 (Prechelt, 1994).The trained network may be used to classify the patterns with missingattributes. The number of misclassified patterns among the 16 cases forwhich attribute 6 is missing is plotted as a function of the possible valuesof 6 on Figure 4b. For large values of 6, there are discrepancies between themedical and the network's diagnosis on half the cases. This is an exampleof the kind of information that may be obtained in practical applications.Classification Tasks with Binary Units 1023 0RQR3ODQH 3 1HW/LQHV 3 0LQLPHUURU 3 %UHDVW FDQFHU D0RQR3ODQH1HW/LQHVJ1XPEHU RI ZHLJKWV         3RVVLEOH YDOXHV RI DWWULEXWH 0RQR3ODQH1HW/LQHV%UHDVW FDQFHU EFigure 4: Breast cancer classification. (a) Generalization error gversus num-ber of weights (logarithmic scale), for P = 525. 1-3: Rprop with no shortcuts(Prechelt, 1994); 4-6: Rprop with shortcuts (Prechelt, 1994); 7: Cascade Correla-tion (Depenau, 1995). For comparison, results with smaller training sets, P = 75(single perceptron) and P = 160, are displayed. Results of MonoPlane and Net-Lines are averages over 50 tests. (b) Classification errors versus possible valuesof the missing attribute bare nuclei for the 16 incomplete patterns, averagedover 50 independently trained networks.5.2.2 Diabetes Diagnosis. This benchmark (Prechelt, 1994) contains D =768 patterns described by N = 8 real-valued attributes, corresponding to 35% of Pima women suffering from diabetes, 65% being healthy. Trainingsets of P = 576 patterns were selected at random, and generalization wastested on the remaining G = 192 patterns. The comparison with publishedresults obtained with other algorithms tested under the same conditions,presented in Figure 5, shows that NetLines reaches the best performancepublished so far on this benchmark, needing many fewer parameters. Train-ing times of NetLines are of  105 updates. The numbers of updates neededby Rprop (Prechelt, 1994) range between 4 * 103 and 5 * 105, depending onthe network's architecture.5.3 Multiclass Problems. We applied our learning algorithm to two dif-ferent problems, both of three classes. We compare the results obtained witha WTA classification based on the results of three networks, each indepen-dently trained to separate one class from the two others, to the results ofthe TON architectures described in section 4. Because the number of classesis low, we determined the three TONs, corresponding to the three possible1024 J. Manuel Torres Moreno and Mirta B. Gordon 1HW/LQHV,QGLDQV 3LPD 'LDEHWHVJ1XPEHU RI ZHLJKWVFigure 5: Diabetes diagnosis: Generalization error gversus number of weights.Results of NetLines are averages over 50 tests. 1-3: Rprop no shortcuts, 4-6:Rprop with shortcuts (Prechelt, 1994).learning sequences. The vote of the three TONs improves the performances,as expected.5.3.1 Breiman's Waveform Recognition Problem. This problem was intro-duced as a test for the algorithm CART (Breiman et al., 1984). The inputpatterns are defined by N = 21 real-valued amplitudes x(t) observed at reg-ularly spaced intervals t = 1, 2, . . . , N. Each pattern is a noisy convex linearcombination of two among three elementary waves (triangular waves cen-tered on three different values of t). There are three possible combinations,and the pattern's class identifies from which combination it is issued.We trained the networks with the same 11 training sets of P = 300 ex-amples, and generalization was tested on the same independent test setof G = 5000, as in Gascuel (1995). Our results are displayed in Figure 6,where only results of algorithms reaching g&amp;lt; 0.25 in Gascuel (1995) areincluded. Although it is known that due to the noise, the classification errorhas a lower bound of  14% (Breiman et al., 1984), the results of NetLinesand MonoPlane presented here correspond to error-free training. The net-works generated by NetLines have between three and six hidden neurons,depending on the training sets. The results obtained with a single percep-tron trained with Minimerror and with the perceptron learning algorithm,which may be considered the extreme case of early stopping, are hardly im-proved by the more complex networks. Here again the overfitting producedby error-free learning with NetLines does not cause the generalization per-Classification Tasks with Binary Units 1025     0RQR3ODQH :7$7KHRUHWLFDO OLPLW0LQLPHUURU1HW/LQHV 9RWH%UHLPDQ V :DYHIRUPVJ1XPEHU RI SDUDPHWHUVFigure 6: Breiman waveforms: Generalization error gaveraged over 11 testsversus number of parameters. Error bars on the number of weights generatedby NetLines and MonoPlane are not visible at the scale of the figure. 1: linear dis-crimination; 2: perceptron; 3: backpropagation; 4: genetic algorithm; 5: quadraticdiscrimination; 6: Parzen's kernel; 7: K-NN; 8: constraint (Gascuel, 1995).formance to deteriorate. The TONs vote reduces the variance but does notdecrease the average g.5.3.2 Fisher's Iris Plants Database. In this classic three-class problem, onehas to determine the class of iris plants based on the values of N = 4 real-valued attributes. The database of D = 150 patterns contains 50 examplesof each class. Networks were trained with P = 149 patterns, and the gener-alization error is the mean value of all the 150 leave-one-out possible tests.Results of g are displayed as a function of the number of weights in Figure 7.Error bars are available for only our own results. In this difficult problem,the vote of the three possible TONs trained with the three possible classsequences (see section 4) improves the generalization performance.</body>
	<conclusion>We presented an incremental learning algorithm for classification, which wecall NetLines. It generates small feedforward neural networks with a singlehidden layer of binary units connected to a binary output neuron. NetLinesallows for an automatic adaptation of the neural network to the complexityof the particular task. This is achieved by coupling an error-correcting strat-egy for the successive addition of hidden neurons with Minimerror, a very1026 J. Manuel Torres Moreno and Mirta B. Gordon  1HW/LQHV YRWH1HW/LQHV :7$,5,6 GDWDEDVHJ1XPEHU RI ZHLJKWVFigure 7: Iris database: Generalization error gversus number of parameters.1: offset, 2: backpropagation (Martinez &amp; Esteve, 1992); 4,5: backpropagation(Verma &amp; Mulawka, 1995); 3,6: gradient-descent orthogonalized training (Verma&amp; Mulawka, 1995).efficient perceptron training algorithm. Learning is fast not only becauseit reduces the problem to that of training single perceptrons, but mainlybecause there is no longer a need for the usual preliminary tests required todetermine the correct architecture for the particular application. Theoremsvalid for binary as well as for real-valued inputs guarantee the existence ofa solution with a bounded number of hidden neurons obeying the growthstrategy.The networks are composed of binary hidden units whose states consti-tute a faithful encoding of the input patterns. They implement a mappingfrom the input space to a discrete H-dimensional hidden space, H beingthe number of hidden neurons. Thus, each pattern is labeled with a binaryword of H bits. This encoding may be seen as a compression of the pattern'sinformation. The hidden neurons define linear boundaries, or portions ofboundaries, between classes in input space. The network's output may begiven a probabilistic interpretation based on the distance of the patterns tothese boundaries.Tests on several benchmarks showed that the networks generated by ourincremental strategy are small, in spite of the fact that the hidden neuronsare appended until error-free learning is reached. Even when the networksobtained with NetLines are larger than those used by other algorithms, itsgeneralization error remains among the smallest values reported. In noisyor difficult problems, it may be useful to stop the network's growth beforeClassification Tasks with Binary Units 1027the condition of zero training errors is reached. This decreases overfitting, assmaller networks (with less parameters) are thus generated. However, theprediction quality (measured by the generalization error) of the classifiersgenerated with NetLines is not improved by early stopping.Our results were obtained without cross-validation or any data manip-ulation like boosting, bagging, or arcing (Breiman, 1994; Drucker, Schapire,&amp; Simard, 1993). Those costly procedures combine results of very largenumbers of classifiers, with the aim of improving the generalization perfor-mance through the reduction of the variance. Because NetLines is a stableclassifier, presenting small variance, we do not expect that such techniqueswould significantly improve our results.AppendixIn this appendix we exhibit a particular solution to the learning strategy ofNetLines. This solution is built in such a way that the cardinal of a convexsubset of well-learned patterns, Lh, grows monotonically upon the additionof hidden units. Because this cardinal cannot be larger than the total numberof training patterns, the algorithm must stop with a finite number of hiddenunits.Suppose that h hidden units have already been included and that theoutput neuron still makes classification errors on patterns of the training set,called training errors. Among these wrongly learned patterns, let  be theone closest to the hyperplane normal to wh, called hyperplane-h hereafter.We define Lh as the subset of (correctly learned) patterns lying closer tohyperplane-h than . Patterns in Lh have 0 &amp;lt; h&amp;lt; | h|. The subset Lh andat least pattern  are well learned if the next hidden unit, h+1, has weights:wh+1= hwh- (1 - h)h(wh* )e0, (A.1)where e0 (1, 0, . . . , 0). The conditions that both Lh and pattern  havepositive stabilities (are correctly learned) impose that0 &amp;lt; h&amp;lt; minLh| h| -  h| h|. (A.2)The following weights between the hidden units and the output will givethe correct output to pattern  and to the patterns of Lh:W0(h + 1) = W0(h) +  (A.3)Wi(h + 1) = Wi(h) for 1  i  h (A.4)Wh+1(h + 1) = -. (A.5)Thus, card(Lh+1)  card(Lh) + 1. As the number of patterns in Lh increasesmonotonically with h, convergence is guaranteed with less than P hiddenunits.1028 J. Manuel Torres Moreno and Mirta B. Gordon</conclusion>
	<discussion>N/A</discussion>
	<biblio>Alpaydin, E. A. I. (1990). Neural models of supervised and unsupervised learning. Un-published doctoral dissertation, Ecole Polytechnique Federale de Lausanne,Switzerland.Biehl, M., &amp; Opper, M. (1991). Tilinglike learning in the parity machine. PhysicalReview A, 44, 6888.Bottou, L., &amp; Vapnik, V. (1992). Local learning algorithms. Neural Computation,4(6), 888-900.Breiman, L. (1994). Bagging predictors (Tech. Rep. No. 421). Berkeley: Departmentof Statistics, University of California at Berkeley.Breiman, L., Friedman, J. H., Olshen, R. A., &amp; Stone, C. J. (1984). Classificationand regression trees. Monterey, CA: Wadsworth and Brooks/Cole.Denker,J.,Schwartz,D.,Wittner,B.,Solla,S.,Howard,R.,Jackel,L.,&amp;Hopfield,J.(1987). Large automatic learning, rule extraction, and generalization. ComplexSystems, 1, 877-922.Depenau, J. (1995). Automated design of neural network architecture for classification.Unpublished doctoral dissertation, Computer Science Department, AarhusUniversity.Drucker, H., Schapire, R., &amp; Simard, P. (1993). Improving performance in neu-ral networks using a boosting algorithm. In S. J. Hanson, J. D. Cowan, &amp;C. L. Giles (Eds.), Advances in neural information processing systems, 5 (pp. 42-49). San Mateo, CA: Morgan Kaufmann.Fahlman, S. E., &amp; Lebiere, C. (1990). The cascade-correlation learning architec-ture. In D. S. Touretzky (Ed.), Advances in neural information processing systems,2 (pp. 524-532). San Mateo: Morgan Kaufmann.Farrell, K. R., &amp; Mammone, R. J. (1994). Speaker recognition using neural treenetworks. In J. D. Cowan, G. Tesauro, &amp; J. Alspector (Eds.), Advances in NeuralInformation Processing Systems, 6 (pp. 1035-1042). San Mateo, CA: MorganKaufmann.Frean, M. (1990). The Upstart algorithm: A method for constructing and trainingfeedforward neural networks. Neural Computation, 2(2), 198-209.Frean, M. (1992). A "thermal" perceptron learning rule. Neural Computation, 4(6),946-957.Friedman, J. H. (1996). On bias, variance, 0/1-loss, and the curse-of-dimensionality(Tech. Rep.) Stanford, CA: Department of Statistics, Stanford University.Fritzke, B. (1994). Supervised learning with growing cell structures. InJ. D. Cowan, G. Tesauro, &amp; J. Alspector (Eds.), Advances in neural informa-tion processing systems, 6 (pp. 255-262). San Mateo, CA: Morgan Kaufmann.Gallant, S. I. (1986). Optimal linear discriminants. In Proc. 8th. Conf. PatternRecognition, Oct. 28-31, Paris, vol. 4.Classification Tasks with Binary Units 1029Gascuel, O. (1995). Symenu. Collective Paper (Gascuel O. Coordinator) (Tech. Rep.).5emes Journees Nationales du PRC-IA Teknea, Nancy.Geman, S., Bienenstock, E., &amp; Doursat, R. (1992). Neural networks and thebias/variance dilemma. Neural Computation, 4(1), 1-58.Goodman, R. M., Smyth, P., Higgins, C. M., &amp; Miller, J. W. (1992). Rule-basedneural networks for classification and probability estimation. Neural Compu-tation, 4(6), 781-804.Gordon, M. B. (1996). A convergence theorem for incremental learning with real-valued inputs. In IEEE International Conference on Neural Networks, pp. 381-386.Gordon, M. B., &amp; Berchier, D. (1993). Minimerror: A perceptron learning rulethat finds the optimal weights. In M. Verleysen (Ed.), European Symposium onArtificial Neural Networks (pp. 105-110). Brussels: D Facto.Gordon, M. B., &amp; Grempel, D. (1995). Optimal learning with a temperaturedependent algorithm. Europhysics Letters, 29(3), 257-262.Gordon, M. B., Peretto, P., &amp; Berchier, D. (1993). Learning algorithms for percep-trons from statistical physics. Journal of Physics I (France), 3, 377-387.Gorman, R. P., &amp; Sejnowski, T. J. (1988). Analysis of hidden units in a layerednetwork trained to classify sonar targets. Neural Networks, 1, 75-89.Gyorgyi, G., &amp; Tishby, N. (1990). Statistical theory of learning a rule. InW. K. Theumann &amp; R. Koeberle (Eds.), Neural networks and spin glasses. Sin-gapore: World Scientific.Hoehfeld, M., &amp; Fahlman, S. (1991). Learning with limited numerical precision usingthe cascade correlation algorithm (Tech. Rep. No. CMU-CS-91-130). Pittsburgh:Carnegie Mellon University.Knerr, S., Personnaz, L., &amp; Dreyfus, G. (1990). Single-layer learning revisited: Astepwise procedure for building and training a neural network. In J. Herault&amp; F. Fogelman (Eds.), Neurocomputing, algorithms, architectures and applications(pp. 41-50). Berlin: Springer-Verlag.Marchand, M., Golea, M., &amp; Rujan, P. (1990). A convergence theorem for sequen-tial learning in two-layer perceptrons. Europhysics Letters, 11, 487-492.Martinez, D., &amp; Esteve, D. (1992). The offset algorithm: Building and learningmethod for multilayer neural networks. Europhysics Letters, 18, 95-100.Mezard, M., &amp; Nadal, J.-P. (1989). Learning in feedforward layered networks:The Tiling algorithm. J. Phys. A: Math. and Gen., 22, 2191-2203.Mukhopadhyay, S., Roy, A., Kim, L. S., &amp; Govil, S. (1993). A polynomial time al-gorithm for generating neural networks for pattern classification: Its stabilityproperties and some test results. Neural Computation, 5(2), 317-330.Nadal, J.-P. (1989). Study of a growth algorithm for a feedforward neural net-work. Int. J. Neur. Syst., 1, 55-59.Prechelt, L. (1994). PROBEN1--A set of benchmarks and benchmarking rules for neu-ral network training algorithms (Tech. Rep. No. 21/94). University of Karlsruhe,Faculty of Informatics.Raffin, B., &amp; Gordon, M. B. (1995). Learning and generalization with Minimerror,a temperature dependent learning algorithm. Neural Computation, 7(6), 1206-1224.1030 J. Manuel Torres Moreno and Mirta B. GordonReilly, D. E, Cooper, L. N., &amp; Elbaum, C. (1982). A neural model for categorylearning. Biological Cybernetics, 45, 35-41.Roy, A., Kim, L., &amp; Mukhopadhyay, S. (1993). A polynomial time algorithmfor the construction and training of a class of multilayer perceptron. NeuralNetworks, 6(1), 535-545.Sirat, J. A., &amp; Nadal, J.-P. (1990). Neural trees: A new tool for classification.Network, 1, 423-438.Solla, S. A. (1989). Learning and generalization in layered neural networks: Thecontiguity problem. In L. Personnaz &amp; G. Dreyfus (Eds.), Neural Networksfrom Models to Applications. Paris: I.D.S.E.T.Torres Moreno, J.-M., &amp; Gordon, M. B. (1995). An evolutive architecture coupledwith optimal perceptron learning for classification. In M. Verleysen (Ed.),European Symposium on Artificial Neural Networks. Brussels: D Facto.Torres Moreno, J.-M., &amp; Gordon, M. B. (1998). Characterization of the sonarsignals benchmark. Neural Proc. Letters, 7(1), 1-4.Trhun, S. B., et al. (1991). The monk's problems: A performance comparison of differentlearning algorithms (Tech. Rep. No. CMU-CS-91-197). Pittsburgh: CarnegieMellon University.Vapnik, V. (1992). Principles of risk minimization for learning theory. InJ. E. Moody, S. J. Hanson, &amp; R. P. Lippmann (Eds.), Advances in neural informa-tion processing systems, 4 (pp. 831-838). San Mateo, CA: Morgan Kaufmann.Verma, B. K., &amp; Mulawka, J. J. (1995). A new algorithm for feedforward neu-ral networks. In M. Verleysen (Ed.), European Symposium on Artificial NeuralNetworks (pp. 359-364). Brussels: D Facto.Wolberg, W. H., &amp; Mangasarian, O. L. (1990). Multisurface method of patternseparation for medical diagnosis applied to breast cytology. In Proceedings ofthe National Academy of Sciences, USA, 87, 9193-9196.Received February 13, 1997; accepted September 4, 1997.This article has been cited by:1. C. Citterio, A. Pelagotti, V. Piuri, L. Rocca. 1999. Function approximation-fast-convergence neural approach based on spectralanalysis. IEEE Transactions on Neural Networks 10, 725-740. [CrossRef]2. Andrea Pelagotti, Vincenzo Piuri. 1997. Entropic Analysis and Incremental Synthesis of Multilayered Feedforward NeuralNetworks. International Journal of Neural Systems 08, 647-659. [CrossRef]</biblio>
</article>